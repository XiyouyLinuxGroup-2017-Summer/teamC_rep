<<<<<<< HEAD
共同
不共同

线程，微型的进程

创建线程
pthread_create()

终止线程
线程start函数执行return语句并返回指定空间
调用pthread_exit()
pthread_cancel取消线程
任意线程调用exit()函数,或主线程执行return，都会使所有线程终止


join连接
pthread_join();


线程的分离
pthread_join()获得返回状态
希望线程终止时能够自动清理并移除之，
调用pthread_detach()并向thread参数传入线程标识符，使该线程处于分离状态。

pthread_detach(pthread_self());

一旦处于分离状态，不能再使用pthread_join()
=======
条件变量总是和互斥变量结合使用。条件变量就共享共享变量的状态改变发出通知，而互斥量则提供对该共享变量访问的互斥

条件变量和互斥变量时天然存在的关系
线程在准备检查共享变量时锁定互斥量
检查共享变量的状态
如果共享变量为处于预期状态，线程应在等待条件变量并进入休眠前解锁互斥量（以便其他线程能访问该共享变量）
当现场因为条件变量的通知而被再度唤醒时，不需要对互斥量再次加锁，因在典型情况下，线程会立即访问共享变量
>>>>>>> my_own


